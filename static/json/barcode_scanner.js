document.addEventListener("DOMContentLoaded", function() {
    const videoContainer = document.getElementById("video-container");
    const scanResultDisplay = document.getElementById("scan-result");
    const startScanButton = document.getElementById("start-scan");
    const stopScanButton = document.getElementById("stop-scan");

    // Ki·ªÉm tra HTTPS
    if (location.protocol !== 'https:' && location.hostname !== 'localhost') {
        scanResultDisplay.innerHTML = '<div style="color: red;">‚ö†Ô∏è Camera c·∫ßn HTTPS ƒë·ªÉ ho·∫°t ƒë·ªông. Vui l√≤ng truy c·∫≠p qua HTTPS.</div>';
        startScanButton.disabled = true;
        return;
    }

    // Ki·ªÉm tra h·ªó tr·ª£ getUserMedia
    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        scanResultDisplay.innerHTML = '<div style="color: red;">‚ö†Ô∏è Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ camera.</div>';
        startScanButton.disabled = true;
        return;
    }

    // C·∫•u h√¨nh QuaggaJS v·ªõi x·ª≠ l√Ω l·ªói t·ªët h∆°n
    const quaggaConfig = {
        inputStream: {
            name: "Live",
            type: "LiveStream",
            target: videoContainer,
            constraints: {
                width: { min: 640, ideal: 1280, max: 1920 },
                height: { min: 480, ideal: 720, max: 1080 },
                facingMode: "environment", // Camera sau
                aspectRatio: { ideal: 1.777778 } // 16:9
            },
        },
        decoder: {
            readers: [
                "ean_reader", 
                "ean_8_reader", 
                "code_128_reader",
                "code_39_reader",
                "code_93_reader",
                "codabar_reader"
            ]
        },
        locate: true,
        locator: {
            halfSample: true,
            patchSize: "medium", // x-small, small, medium, large, x-large
            debug: {
                showCanvas: false,
                showPatches: false,
                showFoundPatches: false,
                showSkeleton: false,
                showLabels: false,
                showPatchLabels: false,
                showRemainingPatchLabels: false,
                boxFromPatches: {
                    showTransformed: false,
                    showTransformedBox: false,
                    showBB: false
                }
            }
        },
        numOfWorkers: 2,
        frequency: 10,
        debug: {
            drawBoundingBox: true,
            showFrequency: true,
            drawScanline: true,
            showPattern: true
        }
    };

    // H√†m ki·ªÉm tra v√† y√™u c·∫ßu quy·ªÅn camera
    async function requestCameraPermission() {
        try {
            scanResultDisplay.innerHTML = '<div style="color: blue;">üì∑ ƒêang y√™u c·∫ßu quy·ªÅn truy c·∫≠p camera...</div>';
            
            const stream = await navigator.mediaDevices.getUserMedia({ 
                video: { 
                    facingMode: "environment",
                    width: { ideal: 1280 },
                    height: { ideal: 720 }
                } 
            });
            
            // D·ª´ng stream test
            stream.getTracks().forEach(track => track.stop());
            
            scanResultDisplay.innerHTML = '<div style="color: green;">‚úÖ Quy·ªÅn camera ƒë√£ ƒë∆∞·ª£c c·∫•p. Nh·∫•n "B·∫Øt ƒë·∫ßu qu√©t" ƒë·ªÉ ti·∫øp t·ª•c.</div>';
            return true;
        } catch (error) {
            console.error('Camera permission error:', error);
            let errorMessage = '';
            
            switch(error.name) {
                case 'NotAllowedError':
                    errorMessage = '‚ùå Quy·ªÅn camera b·ªã t·ª´ ch·ªëi. Vui l√≤ng:<br>1. Nh·∫•n v√†o bi·ªÉu t∆∞·ª£ng üîí tr√™n thanh ƒë·ªãa ch·ªâ<br>2. Cho ph√©p quy·ªÅn Camera<br>3. Refresh trang v√† th·ª≠ l·∫°i';
                    break;
                case 'NotFoundError':
                    errorMessage = '‚ùå Kh√¥ng t√¨m th·∫•y camera. Vui l√≤ng ki·ªÉm tra thi·∫øt b·ªã c√≥ camera kh√¥ng.';
                    break;
                case 'NotSupportedError':
                    errorMessage = '‚ùå Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ camera.';
                    break;
                case 'NotReadableError':
                    errorMessage = '‚ùå Camera ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi ·ª©ng d·ª•ng kh√°c.';
                    break;
                default:
                    errorMessage = `‚ùå L·ªói camera: ${error.message}`;
            }
            
            scanResultDisplay.innerHTML = `<div style="color: red;">${errorMessage}</div>`;
            return false;
        }
    }

    startScanButton.addEventListener("click", async function() {
        startScanButton.disabled = true;
        
        // Ki·ªÉm tra quy·ªÅn camera tr∆∞·ªõc
        const hasPermission = await requestCameraPermission();
        if (!hasPermission) {
            startScanButton.disabled = false;
            return;
        }
        
        scanResultDisplay.innerHTML = '<div style="color: blue;">üì∑ ƒêang kh·ªüi ƒë·ªông camera...</div>';
        
        Quagga.init(quaggaConfig, function(err) {
            if (err) {
                console.error('Quagga init error:', err);
                let errorMessage = '';
                
                if (err.name === 'NotAllowedError') {
                    errorMessage = '‚ùå Quy·ªÅn camera b·ªã t·ª´ ch·ªëi. Vui l√≤ng cho ph√©p quy·ªÅn camera v√† th·ª≠ l·∫°i.';
                } else if (err.name === 'NotFoundError') {
                    errorMessage = '‚ùå Kh√¥ng t√¨m th·∫•y camera.';
                } else {
                    errorMessage = `‚ùå Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông camera: ${err.message || err}`;
                }
                
                scanResultDisplay.innerHTML = `<div style="color: red;">${errorMessage}</div>`;
                startScanButton.disabled = false;
                return;
            }
            
            try {
                Quagga.start();
                scanResultDisplay.innerHTML = '<div style="color: green;">‚úÖ Camera ƒë√£ s·∫µn s√†ng. H∆∞·ªõng camera v√†o m√£ v·∫°ch ƒë·ªÉ qu√©t.</div>';
                stopScanButton.disabled = false;
            } catch (startErr) {
                console.error('Quagga start error:', startErr);
                scanResultDisplay.innerHTML = `<div style="color: red;">‚ùå L·ªói khi b·∫Øt ƒë·∫ßu qu√©t: ${startErr.message}</div>`;
                startScanButton.disabled = false;
            }
        });
    });

    stopScanButton.addEventListener("click", function() {
        try {
            Quagga.stop();
            scanResultDisplay.innerHTML = '<div style="color: orange;">‚èπÔ∏è ƒê√£ d·ª´ng qu√©t.</div>';
            startScanButton.disabled = false;
            stopScanButton.disabled = true;
        } catch (err) {
            console.error('Stop error:', err);
        }
    });

    Quagga.onDetected(function(result) {
        if(result.codeResult && result.codeResult.code){
            let code = result.codeResult.code;
            scanResultDisplay.innerHTML = `<div style="color: green; font-weight: bold;">üéâ M√£ v·∫°ch ƒë∆∞·ª£c ph√°t hi·ªán: ${code}</div>`;
            
            // D·ª´ng qu√©t sau khi ph√°t hi·ªán
            setTimeout(() => {
                Quagga.stop();
                startScanButton.disabled = false;
                stopScanButton.disabled = true;
            }, 1000);

            // T√πy ch·ªçn: G·ªçi h√†m ƒë·ªÉ l·∫•y th√¥ng tin s·∫£n ph·∫©m t·ª´ Open Food Facts d·ª±a tr√™n m√£ v·∫°ch
            // V√≠ d·ª•: callProductInfoAPI(code);
        }
    });

    // X·ª≠ l√Ω l·ªói trong qu√° tr√¨nh qu√©t
    Quagga.onProcessed(function(result) {
        var drawingCtx = Quagga.canvas.ctx.overlay,
            drawingCanvas = Quagga.canvas.dom.overlay;

        if (result) {
            if (result.boxes) {
                drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute("width")), parseInt(drawingCanvas.getAttribute("height")));
                result.boxes.filter(function (box) {
                    return box !== result.box;
                }).forEach(function (box) {
                    Quagga.ImageDebug.drawPath(box, {x: 0, y: 1}, drawingCtx, {color: "green", lineWidth: 2});
                });
            }

            if (result.box) {
                Quagga.ImageDebug.drawPath(result.box, {x: 0, y: 1}, drawingCtx, {color: "#00F", lineWidth: 2});
            }

            if (result.codeResult && result.codeResult.code) {
                Quagga.ImageDebug.drawPath(result.line, {x: 'x', y: 'y'}, drawingCtx, {color: 'red', lineWidth: 3});
            }
        }
    });

    // X·ª≠ l√Ω submit upload file
    const uploadForm = document.getElementById("barcode-upload-form");
    const uploadResultDisplay = document.getElementById("upload-result");

    uploadForm.addEventListener("submit", function(e) {
        e.preventDefault();
        let formData = new FormData(uploadForm);
        fetch("/api/process_barcode_image", {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if(data.success){
                uploadResultDisplay.innerHTML = `<pre>${JSON.stringify(data.product, null, 2)}</pre>`;
            } else {
                uploadResultDisplay.innerText = data.message;
            }
        })
        .catch(err => {
            uploadResultDisplay.innerText = "L·ªói khi t·∫£i ·∫£nh l√™n.";
        });
    });
});